Most people learn Java EE programming from Java EE tutorial examples, me too. Now I want to dig deeper into them, one by one. I will make some analysis, comments, fix some bugs, make some suggestions and rebuild them.

I will not provide any runnable projects, whatever NetBeans or Eclipse. Instead I provide the rebuild script and YouTube video. You can watch my YouTube video and rebuild by following the script step by step, copy/paste.

The best way to follow me is to go to GitHub my project site:
https://github.com/feili3000/Java-EE-8-tutorial-examples-comment-and-rebuild
open README.md, it has the links to PublishSequence.md or Category.md, these 2 files list all the examples, you can choose a example to have look.

You can also download everything as a zip file by clicking [Code], [Download ZIP]. You can start with README.html. It has the link to
PublishSequence.html or Category.html, and these 2 html files have the link to the examples.

Now let's set up a development environment. Please follow me exactly so we can be identical.

1. download Java JDK 17.0.2 for windows from:
https://www.oracle.com/java/technologies/downloads/
Click [Windows], [x64 Installer].
install it.

2. download Java JDK 8u311 for windows from(You need setup an Oracle account):
https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html
Choose [Windows x64 Installer]
install it.

3. download Java EE 8 SDK from:
https://www.oracle.com/java/technologies/java-ee-sdk-download.html
Click [java_ee_sdk-8u1.zip], download it.
3.1 create a folder c:\programming.
3.2 Right click the zip, [Extract all], copy glassfish5 to c:\Programming. Change its name to: glassfish-5.0
3.3 make a new folder c:\Programming\javaee8\tutorial
3.4 copy examples folder from: C:\Programming\glassfish-5.0\docs\javaee-tutorial to c:\Programming\javaee8\tutorial

4. GlassFish server 5.0 and Apache Netbeans 12.6 have a problem in the JSF part, so I choose GlassFish 5.1.0,
download GlassFish Server 5.1.0 from:
https://www.eclipse.org/downloads/download.php?file=/glassfish/glassfish-5.1.0.zip
4.1 In Windows file explorer, right click the file, choose [Extract All...]
4.2 Go in the folder glassfish-5.1.0, Rename glassfish5 to glassfish-5.1.0 and copy it to C:\Programming

5. download apache netbeans 12.6 from:
https://netbeans.apache.org/
Click [Apache-NetBeans-12.6-bin-windows-x64.exe(SHA-512, PGP ASC)], click on the first link, to download,
install it, double click, [next], [accept], [next], change the installation folder to C:\Programming\NetBeans-12.6, and choose JDK 17.0.2, [Next], [Install], [Finish].

6. Configuring ide
6.1 Start netbeans
6.2 open menu [Tools], [Options], select [General] tab, Choose your favorite web browser for web Browsers: click [Apply] button, wait a while for it settle down, click [OK] button.
6.3 open menu [Windows],  [services], it will open a panel on the left and Services tab on the panel top. From now on, we call the panel Projects panel.
6.4 Click on the Services tab on the Projects panel. Right click on the Servers from the list. Choose [Add Server]. It pops up a window, changes the name to GlassFish Server 5.1.0, and chooses GlassFish Server. [Next], [Browse...], find c:\Programming\glassfish-5.1.0, [choose], there is a message say" Detected a GlassFish Server 5.1.0 install...", [Next],  [Finish].
6.5 Right click on GlassFish Server 5.1.0, and choose [Start]. It pops up a window asking you to choose another JDK other than JDK 17, GlassFish 5.1.0 runs on JDK 1.8, so you choose JDK 1.8 and click [OK]. Wait for a while till you see a green triangle show up besides GlassFish head. It means the server started successfully. Right click on [GlassFish Server 5.1.0] and choose [View Domain Admin Console], the GlassFish 5.1.0 admin page shows up in your browser.
6.6 test Java DB. GlassFish server will install Java DB for you automatically. Expand [Databases],  expend [+ Java DB], right click on sample database and choose [connect...].
6.7 If you choose Chrome as the browser, install Netbeans Connector for Chrome from:
https://chrome.google.com/webstore/detail/netbeans-connector/hafdlehgocfcodbgjnpecfajgkeejnaa?hl=en
Click [Add to Chrome], Click [Add extension]
Later on when we do HTML5 and Javascript examples, the connector will be very helpful when we do debugging.

7. open Java EE Tutorial Examples project.
7.1 open menu [File --], [Open Projects...], Go to c:\Programming\javaee8\tutorial, click on the project [examples], click on the [Open Project] button.

8. Open project hello1.
8.1 In the project panel, expend +[Java EE Tutorial Examples], expand +Modules, expand +web, extend jsf, right click on [holle1], then choose [Open Project]. You got Project [hello1] opened.

9. Create a new folder C:\Programming\javaee8\tutorial\myexamples\web\jsf
9.1 Open menu [File], [New Project...], Choose [Java with Maven] and [Web Application],  [Next], Project Location: should be: C:\Programming\javaee8\tutorial\myexamples\web\jsf, and project name: should be RequestScope-1-1-1, [Next], Server: should be [Glassfish 5.1.0] and Java EE version: should be [Java EE 8 Web], [Finish].
9.2 If the project name is not RequestScope-1-1-1, right click on it, and choose Rename... Make the Display name as RequestScope-1-1-1. Click [OK]
9.3 If you find beans.xml under Web Pages\WEB-INF, delete it. If you find anything under Source Packages, delete them all.  Delete anything under [Other Sources]/src/main/resources.
9.4 Right click on project RequestScope-1-1-1, and choose [Properties].
9.5 Click [Sources] in the left panel, confirm 1.8 is Source/Binary format in the right panel.
9.6 Click [Frameworks] in the left panel, click the [Add...] button in the right panel. Choose [JavaServer Faces] from the list. You need to wait for a while for the red text to disappear.
9.7 Click [Compile] in the left panel, choose [JDK 1.8] as Java Platform.
9.8 Click [Run] in the left panel, confirm [GlassFish 5.1.0] is the Server, and [Java EE 8 Web] is the Java EE Version. Click the [OK] button to close the properties window.
9.9 Double click web.xml under WebPages\WEB-INF, change /faces/* to *.xhtml, and faces/index.xhtml to index.xhtml. This will make the request call url simpler. Also change 30 minutes to 300 for the session timeout, so the page will stay there long enough for us to talk about it in detail.

10. Copy the whole project from hello1 to RequestScope-1-1-1.
10.1 delete all pages under Web Pages from RequestScope-1-1-1, copy Web Pages hello1 project to RequestScope-1-1-1 project, including resources folder, index.xhtml and response.xhtml. copy Java code javaeetutorial.hello1 folder from Source Packages of hello1 to RequestScope-1-1-1.
10.2 Right click  RequestScope-1-1-1, [Clean and Build], [Run]. You will see a web page showing up.
10.3 If you meet the error: Failed to clean project, just go to Services tab to stop GlassFish server.
10.4 double click on web.xml and look at [welcome-file], it is index.xhtml. So we know the page showing up is index.xhtml.
10.5 The first thing I want to change is h:graphicImage url, Java EE has a design problem for how to use resources, so they come up with this terrible format, nobody can remember how to use it, so let's change it back to the old way. In the project, find the image location from [Web Pages], so, change to url="resources/images/duke.waving.gif"
10.6 delete all id="xxx", they are useless. id can be used by page, javascript and stylesheet. But there are no Javascript files or stylesheet files and no reference to them. Delete class="messagecolor" from [div], it targets a stylesheet but the project does not have any stylesheet.
11. Click [Save] icon in top toolbar, right click the project and do [Clean and Build], and [Run]. You see a page show up in the browser. Before we dig into RequestScope-1-1-1 application details, we need some basic knowledge in mind.
12. The first question is: where is the RequestScope-1-1-1 application code for GlassFish server 5.1.0 to run? If you surf the Internet, people tell you here and there, but none is correct. I tell you where it is: Open [Services], [Servers], [GlassFish 5.1.0], [Applications], right click, [View Domain Admin Console], click [Applications], [RequestScope-1-1-1], [Location:] field tell you where GlassFish 5.1.0 loads RequestScope-1-1-1 application. It is under your nose. Open [Files], [RequestScope-1-1-1], [target], [RequestScope-1-1-1-1.0-SNAPSHORT] is the folder where GlassFish 5.1.0 loads the RequestScope-1-1-1 application. It is created by [Clean and Build], if you skip it and directly click [Run], Netbeans will create it first.
13. How does a web application work? A web application is composed of a series of request/response. When we put http://localhost:8080/RequestScope-1-1-1/ in the browser's URL bar, we made a request to a local Java Application Server. The server received the request, but no page was mentioned, so it opened web.xml and found index.xhtml is the page requested. But the index.xhtml is called a JSF page because there are JSF elements embedded in the file. Web Browser does not understand JSF, so the server must translate a JSF page to pure html. We call the pure html a response. After the server constructed the response and sent it out to the browser, the first request/response cycle finished. What you see now in the browser is the first response. If you continue, put something into the input box, and click the [Submit] button, you make a second request, the server will send a second response which is constructed from response.xhtml. If you click the [Back] button, you will make a third request...The application will continue such request/response cycles again and again.
14. Let's look at the RequestScope-1-1-1 application in detail. Open index.xhtml. Notice h:inputText has 2 fields: required="true", requiredMessage="Error: A name is required.", which means submit an empty input will cause an error, the error message is "Error: A name is required.", the message will be displayed on the h:messages location and has the style defined by the h:messages. In the web browser, leave the input box empty, click the [Submit] button to test it.
14.1 maxlength="25" tells the browser not to create an input box longer than 25, it can be less than 25 if the page does not have 25 character spaces available.
15. "#{hello.name}"  is a JSF element that links to Java code. Double click Hello.java. You see a normal Java class Hello with 2 new tags: @Named and @RequestScoped. We call an instance of the Hello class a managed bean. The managed bean has a name and a scope. The name can be explicit or implied. An explicit name looks like @Name("AnyName"), The implied name is the same as class name except in the lower case of the first letter. The developer uses the name in the JSF page and the server uses it to retrieve the instance of the class from its database.  When we click [run] for the project [hello_c], the GlassFish server actually will deploy the project first before running it. At the deploy procedure, the server will find all managed bean and register them in the server JNDI database. In this project, the server will register something like name="hello_c/hello", class="javaeetutorial.hello1.Hello, scope="request", instance=null; When the server scans a JSF page and meets #{hello.xxx}, the server will look at its JNDI database, if the instance is null, it will create a new instance and put it into the database. For the consecutive processing, the server will use the same instance to translate the JSF page.
16. The scope defines when the instance can be destroyed. There are many kinds of scopes, the most used are: @RequestScoped, @ViewScoped, @FlowScoped, @ConversationScoped, @SessionScoped, @ApplicationScoped. The "hello" bean has a request scope, so when the server meets #{hello.name}, the bean is created, when the response is constructed and sent out, it is destroyed.
17. The value="#{hello.name}" in the  h:inputText has 2 purposes, when the server construct html format it calls hello.getName() to retrieve the value, if the value is not null or empty it will be put into the input box; when you enter something in the box, say "Fei Li", the server will call hello.setName("Fei Li") to store the value for you.
18. Let's test the second request. put a name(say "Fei LI") into the input box and click the [Submit] button. From the action="response" of the h:commandButton in the index.xhtml, we know the request is for the page response.xhtml. This request is different from the first request, it submitted a form. The browser will extract all form input as a name=value sequence, and send them to the server too. So the server not only receives a request for the page, but also a parameter: hello.name="Fei Li".
19. If the server receives a request with parameters, the server will go to a procedure called bean restoration.
20. After the server gets a new request, it loades response.xhtml to process the html response. Let's first modify the response.xhtml a little bit. Double click response.xhtml, change image url to "resources/images/duke.waving.gif", delete id="back". Click the save button in the toolbar under the menu bar. Because the response.xhtml has a tag #{hello.name}, it goes to its JNDI database to find the hello bean definition and creates a brand new managed bean instance with the name as "hello". This instance does not have anything with the previous one. The previous one is for a different request scope and dead already, this one is for the new undergoing request "response".  After the server creates a new hello instance, the server will go to a procedure called restore. It will create a new hello bean again and put it into the JNDI database. Then the server will find all hello.xxx from the parameter list and call hello.setxxx() to restore the bean values. In this case, because we have the parameter hello.name="Fei Li'', the server calls hello.setName("Fei Li'').  After the restore procedure finishes, the server will load responxe.xhtml and do html translation. After the translation finishes, the server will send the response page out and delete hello bean again.
21. The third request will be to click the [Back] button in the response page. The [Back] button's action="index", so we know this request targets the index.xhtml and no parameters. Of course, the server will create a new hello bean instance again, because the request has no request parameters, so the restore procedure is skipped and hello.name is null. That is why we see an empty input text box here.
22. Do we have other requests that cause a new hello bean instance creation? Yes, we have, if we leave the input box empty and click the [Submit] button, it will create a new request scenario. When the server gets the request,  It goes to the restoration procedure first. After the restoration procedure, we get a restored new bean "hello", and hello.name = "". Now the server goes to another procedure called validation procedure. If the validation passes, the server will load response.xhtml to process, if failed, it will load the original page which is index.xhtml to process, and put the error message in it, and send it back to the browser.
23. Let's add some Java code to Hello.java to show when the server creates and destroys hello bean instances. Delete the original constructor, and add the following code:
    static int globalBeanID = 0;
    int localBeanID = globalBeanID;

    public Hello() {
        globalBeanID++;
        localBeanID = globalBeanID;
        System.out.println("hello bean ................................................." + globalBeanID + " created.");
    }

    @Override
    public void finalize() {
        System.out.println("hello bean .......................................... " + localBeanID + " destroyed.");
    }
24. Click [Save], do [Clean and Build], then [Run]. You will see the index.xhtml page shows up in the browser.
24.1 Click the [GlassFish 5.1.0] tab in the [output] window. You will see "hello bean 1 created.|#]" and "hello bean 2 created.|#]". We only expected one but the server did 2. I have no idea why the server did this, you tell me if you know. Anyway, we can get rid of this annoyance by clicking [Run] again,  see, this time, only hello bean 1 created.
24.2 If you leave the page alone for 1-2 minutes, you will see these: "hello bean 1 destroyed.|#]". This is exactly what we are looking for, the index.xhtml request is done, the page sent out to the browser, and request scope hello bean destroyed.
24.3 Enter Fei Li into the input box and click the [Submit] button. The response.xhtml page shows up in the browser. The [GlassFish 5.1.0] tab shows "hello bean 2 created.|#]". wait for a while, you will see "hello bean 2 destroyed.|#]", as good as we want, processing response.xhtml needs to create a new bean instance, and destroy it after the page is sent out to the browser.
24.4 Click the [Back] button, you will see the index.html page shows up again, and the [GlassFish 5.1.0] tab window shows "hello bean 3 created.|#]", a while later, you will see "hello bean 3 destroyed.|#]". Good job, Let's continue.
24.5 Leave the input box empty, and click the [Submit] button. Index.xhtml shows up with the error message in it. [GlassFish 5.1.0]Tab window shows "hello bean 4 created.|#]", and "hello bean 4 destroyed.|#] a little while later.
24.6 If you click very quickly, a bunch of bean creations come first, and later on a bunch of bean destroyed messages come up together. It gives you an idea how Java garbage collector works asynchronously with the objects creations.