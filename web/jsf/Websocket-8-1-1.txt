1. In the Java EE 8 tutorial examples, there are 2 examples about Websocket, but there are old JSF 2.2 examples. The  Java EE 8 tutorial document does describe JSF 2.3 Websocket, but no example is provided.
2. Let's make one.
2.1 Open menu [File], [New Project], select [Java with Maven] and [Web Application], [Next ], Make the project name: Websocket-8-1-1, [Next ], select [Java EE 8 Web], make sure Server is GlassFish Server 5.1.0, [Finish]
2.2 Change the project name if it is not [Websocket-8-1-1].
2.3 Right click the project and choose [Properties], click [Sources], make sure [Source/Binary Format] is 1.8. click Frameworks, add [JavaServer Faces], click [Compile], Java Platform is JDK 1.8, click [Run], Server is GlassFish 5.1.0 and Java EE Version is Java EE 8 Web. [OK]
2.4 Open pom.xml, add:
<scope>provided</scope>
to the javax.faces dependency like this:
        <dependency>
            .......................
            <scope>provided</scope>
        </dependency>
the <scope>provided</scope> tells Netbeans, use Netbeans' JSF 2.3.9 library to compile, but do not pack it to the .war file, GlassFish 5.1.0 server will use its own JSF 2.3.9 to run this project. The Netbeans' JSF 2.3.9 library is not working well at run time.
2.5 open web.xml, change url-pattern to *.xhtml, change welcome file to index.xhtml, change session-timeout to 300, so we have enough time to talk about it. welcome file is index.xhtml, add the following to it:
      <context-param>
        <param-name>javax.faces.ENABLE_WEBSOCKET_ENDPOINT</param-name>
        <param-value>true</param-value>
    </context-param>
2. 6. [Save ]. Delete all Java code from Source Packages, delete META-INF from src/main/resources under Other Source. Delete index.html, not index.xhtml. Do not delete beans.xml. It can be deleted according to the specification, but if you delete it, the application will fail.
3. Open index.xhtml, make it like this:
<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:jsf="http://xmlns.jcp.org/jsf">
    <h:head>
        <script type="text/javascript">
            function onMessage(message, channel, event) {
                //alert(message);
                var arraypv = message.split("/");
                document.getElementById("form1:price").value = arraypv[0];
                document.getElementById("form1:volume").value = arraypv[1];
            }
            function  onOpen(event) {
                //alert("Client try to call the server");
            }
        </script> 
    </h:head>
    <h:body>
        <h3>JSF 2.3 WebSocket</h3>
        <h4>Server Push: Deliver everything to your door.</h4>
        <form jsf:id="form1">
            <f:Websocket-8-1-1 id="c1" channel="helloChannel" connected="false"
                         onmessage="onMessage" onopen="onOpen" scope="session">
                <f:ajax event="newMsg" render="price"/>
            </f:Websocket-8-1-1>
            <label for="price">Price: </label>
            <output jsf:id="price" />
            <p/>
            <label for="volume">Volume: </label>
            <output jsf:id="volume" />
            <p/>
            <input type="submit" jsf:onclick="jsf.push.open('form1:c1');" jsf:action="#{helloBean.start()}" value="Start push">
                <f:ajax/>
            </input>
            <br/>
            <input type="submit" jsf:onclick="jsf.push.close('form1:c1');" jsf:action="#{helloBean.stop()}" value="Stop push">
                <f:ajax/>
            </input>
        </form>
    </h:body>
</html>
4. A little bit of explanation.
4.1
            <f:Websocket-8-1-1 id="c1" channel="helloChannel" connected="false"
                         onmessage="onMessage" onopen="onOpen" scope="session"/>
open a web socket, the id isbe used in Javascript. The channel is used in the push context in the Java code. The socket initial status is closed. There are 2 Javascript functions hooked up. One for receiving messages and another for the open connection. The scope of the session means each session will get its own web socket.
4.2 There are 2 buttons:
            <input type="submit" jsf:onclick="jsf.push.open('form1:c1');" jsf:action="#{helloBean.start()}" value="Start push">
                <f:ajax/>
            </input>
            <input type="submit" jsf:onclick="jsf.push.close('form1:c1');" jsf:action="#{helloBean.stop()}" value="Stop push">
                <f:ajax/>
            </input>
The first button calls the Javascript function in the JSF provided Javascript library to start socket connection, and calls the bean's start function to start the server push. The second button calls the Javascript function to close socket connection, and calls the bean's stop function to stop the server push.
4.3 In the header we have a message processing function.
5. Let's go to the server side. create a session bean like this:

package view;

import javax.inject.Named;
import java.io.Serializable;
import javax.enterprise.context.SessionScoped;
import javax.faces.push.Push;
import javax.faces.push.PushContext;
import javax.inject.Inject;

@Named(value = "pushSessionBean")
@SessionScoped
public class PushSessionBean implements Serializable {

    @Inject
    @Push(channel = "helloChannel")
    PushContext helloChannel;

    public PushContext getHelloChannel() {
        return helloChannel;
    }

    public void setHelloChannel(PushContext helloChannel) {
        this.helloChannel = helloChannel;
    }

}
Here we create a session bean to handle a session scope web socket client. We inject a push context from the server and assign it to the channel we defined in the web socket element.
6. create a view scope bean like this:
package view;

import java.io.Serializable;
import javax.inject.Named;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadLocalRandom;
import static java.util.concurrent.TimeUnit.SECONDS;
import javax.annotation.PostConstruct;
import javax.faces.view.ViewScoped;
import javax.faces.push.PushContext;
import javax.inject.Inject;

@Named(value = "helloBean")
@ViewScoped
public class HelloBean implements Serializable {

    @Inject
    PushSessionBean pushSessionBean;

    PushContext helloChannel;

    public HelloBean() {
    }

    @PostConstruct
    public void init() {
        helloChannel = pushSessionBean.getHelloChannel();
    }

    private ScheduledExecutorService scheduler = null;
    private volatile double price = 100.0;
    private volatile int volume = 300000;
    private volatile String msg = null;


    volatile boolean push = false;

    public void stop() {
        System.out.println("Stop ............................................................");
        push = false;
        if ( scheduler != null ) {
            scheduler.shutdownNow();
            scheduler = null;
        }
    }

    public void start() {
        System.out.println("Start ............................................................");
        push = true;
        if ( scheduler == null ) {
            scheduler = Executors.newScheduledThreadPool(1);
        }
        Runnable beeper = new Runnable() {
            @Override
            public void run() {
                try {
                    if (helloChannel != null) {
                        price += (ThreadLocalRandom.current().nextInt(0, 101) - 50) / 100.0;
                        volume += ThreadLocalRandom.current().nextInt(5000) - 2500;
                        msg = String.format("%.2f / %d", price, volume);
                        helloChannel.send(msg);
                    } else {
                        System.out.println("helloChannel null............................................................");
                    }
                } catch (Exception e) {
                    System.out.println("e=" + e);
                }
            }

        };
        scheduler.scheduleAtFixedRate(beeper, 0, 1, SECONDS);
    }
}
It injects the session bean, and gets the push context from the bean, and provides start and stop functions for the client side to control push.
7.  [Save], stop server, [Clean and Build], [Run]. [Start Push], [Stop push]...
8. Web sockets have another mode. Instead of pushing all data to the client, the server only sends a notification message to the client and waits for the client to pick them up. Let's see how it works. Add another form to the index.xhtml like this:

        <hr/>
        <h4>Server Push: Push a notification message only, you pick up everything in store.</h4>
        <form jsf:id="form2">
            <f:Websocket-8-1-1 id="c2" channel="pickupInStoreChannel" connected="false" scope="session">
                <f:ajax event="newArrival" render="orderItemList"/>
            </f:Websocket-8-1-1>       
            <h:selectOneListbox id="orderItemList" size="10" style="width:150px;">
                <f:selectItems value="#{pickupBean.orderItemList}"/>
            </h:selectOneListbox>                               
            <p/>
            <input type="submit" jsf:onclick="jsf.push.open('form2:c2');" jsf:action="#{pickupBean.start()}" value="Start push">
                <f:ajax/>
            </input>
            <input type="submit" jsf:onclick="jsf.push.close('form2:c2');" jsf:action="#{pickupBean.stop()}" value="Stop push">
                <f:ajax/>
            </input>
            <p/>
            <f:Websocket-8-1-1 id="c2" channel="pickupInStoreChannel" connected="false" scope="session">
                <f:ajax event="newArrival" render="orderItemList"/>
            </f:Websocket-8-1-1>
        </form>
This second web socket is a little different from the first one. It is listening to the server message, when it receives a message "newArrival", it sends an ajax post call to get the new data which is the orderItemList in the pickupBean.
9. Add another push context to the PushSessionBean.java like this:
    @Inject
    @Push(channel = "pickupInStoreChannel")
    PushContext pickupInStoreChannel;

    public PushContext getPickupInStoreChannel() {
        return pickupInStoreChannel;
    }

    public void setPickupInStoreChannel(PushContext pickupInStoreChannel) {
        this.pickupInStoreChannel = pickupInStoreChannel;
    }
10. Create another bean like this:
package view;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Named;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import static java.util.concurrent.TimeUnit.SECONDS;
import javax.annotation.PostConstruct;
import javax.faces.view.ViewScoped;
import javax.faces.push.PushContext;
import javax.inject.Inject;

@Named(value = "pickupBean")
@ViewScoped
public class PickupBean implements Serializable {

    @Inject
    PushSessionBean pushSessionBean;

    PushContext pickupInStoreChannel;

    public PickupBean() {
    }

    @PostConstruct
    public void init() {
        pickupInStoreChannel = pushSessionBean.getPickupInStoreChannel();
        orderItemList = new ArrayList();
        typeList = new ArrayList();
        typeList.add("Food");
        typeList.add("iPhone");
        typeList.add("Cloths");

    }

    private ScheduledExecutorService scheduler = null;

    String notification = "newArrival";
    List<String> orderItemList;
    volatile int j = 0;
    volatile int i = 0;
    List<String> typeList;

    public List<String> getOrderItemList() {
        return orderItemList;
    }

    public void setOrderItemList(List<String> orderItemList) {
        this.orderItemList = orderItemList;
    }

    volatile boolean push = false;

    public void stop() {
        System.out.println("pickup Stop ............................................................");
        push = false;
        if ( scheduler != null ) {
            scheduler.shutdownNow();
            scheduler = null;
        }
    }

    public void start() {
        System.out.println("pickup Start ............................................................");
        push = true;
        if ( scheduler == null ) {
            scheduler = Executors.newScheduledThreadPool(1);
        }
        Runnable beeper = new Runnable() {
            @Override
            public void run() {
                try {
                    if (pickupInStoreChannel != null) {

                        while (true) {
                            if (i < 4) {
                                i++;
                                break;
                            }
                            orderItemList.clear();
                            String type = typeList.get(j);
                            orderItemList.add(type + " 1");
                            orderItemList.add(type + " 2");
                            orderItemList.add(type + " 3");
                            i++;
                            if (i >= 5) {
                                i = 0;
                            }
                            j++;
                            if (j >= 3) {
                                j = 0;
                            }
                            pickupInStoreChannel.send(notification);
                        }

                    } else {
                        System.out.println("helloChannel null............................................................");
                    }
                } catch (Exception e) {
                    System.out.println("e=" + e);
                }
            }

        };
        scheduler.scheduleAtFixedRate(beeper, 0, 1, SECONDS);
    }
}
11. [Save], stop server, [Clean and Build], [Run].