1. Let's go to the next example, which is guessnumber-jsf. In the project panel, Expend +Java EE Tutorial -] +Modules -] +web -] +jsf, right click [guessnumber-jsf] project,  choose [Open Project].
2. Open menu [File], [New Project...], Select [Java with Maven] and [Web Application], click [Next]. Make Project name: guessnumber-jsf_c, and Project Location: C:\Programming\javaee8\tutorial\myexamples\web\jsf, click [Next]. Make sure Server: is GlassFish Server 5.1.0 and JavaEE Version: is Java EE 8 Web. Click [Finish]
3. If the project name is not  guessnumber-jsf_c, right click on it, and choose [Rename...], make the Display name as  guessnumber-jsf_c, click [OK]
4. If you find beans.xml under Web Pages\WEB-INF, delete it. If you find anything under Source Packages, delete them all.  Delete anything under [Other Sources]/src/main/resources. Click the [Save] icon on the top toolbar.
5. Right click on project  guessnumber-jsf_c, and choose Properties.
5.1 Click Sources in the left panel, confirm 1.8 is Source/Binary format in the right panel.
5.2 Click Frameworks in the left panel, click the [Add...] button in the right panel. Choose [JavaServer Faces] from the list.
5.3 Click Compile in the left panel, choose [JDK 1.8] as Java Platform:.
5.4 Click Run in the left panel, confirm [GlassFish 5.1.0] is the Server, and [Java EE 8 Web] is the Java EE Version. Click the [OK] button to close the properties window.
6. Double click web.xml under WebPages -] WEB-INF, change /faces/* to *.xhtml, and faces/index.xhtml to index.xhtml. This will make the request call url simpler. Also change 30 minutes to 300 for the session timeout, so the page will stay there long enough for us to talk about it in detail.
9. Copy guessnumber-jsf project to  guessnumber-jsf_c.
9.1 delete all web pages from guessnumber-jsf_c, copy resources folder,  greeting.xhtml and response.xhtml from guessnumber-jsf [Web Pages] to  guessnumber-jsf_c [Web Pages]. copy javaeetutorial.guessnumber folder from Source Packages of  guessnumber-jsf to guessnumber-jsf_c.
9.2 Open web.xml again and change the welcome page to greeting.xhtml.
9.3 [Save], right click the project, choose [Clean and Build], right click and choose [Run] for project  guessnumber-jsf_c. You will see a web page showing up.
9.4 Enter number 8, [Submit], click the [Back] button.
10. The welcome page is greeting.xhtml, so double click to open it.
10.1 The first thing I want to say is about h:outputStylesheet. It has library="css". OK, we can find css, but it is under resources. The resources are not mentioned anywhere. So it is implied and hard coded. So how about I want to call it another name? Or I have 2 resource sets: resources1 and resources2. So, I do not think it is a good design but we can do nothing about it. What we can do is make it simpler by removing library="...", and only using name="...", like this: name="css/default.css" or go the html way: <link rel="stylesheet" href="resources/css/default.css"/>.
11. I do not understand why an image is referenced in such a way h:graphicImage value="#{resource['images:wave.med.gif']}", awful format and a bad design again. Let's change it back to our traditional way, value="resources/images/wave.med.gif". Now it is simple, straightforward and clear.
12. Delete id="submit" and id="error1", because no stylesheet or Javascript code to address them.
13. h:message is for="userNo" and the h:inputText has id="userNo", so the h:message is for the h:inputText validation error only. What about other JSF messages? Let's add one like this: you can add it under </h:form>,

<h:messages showSummary="true" showDetail="false" style="color: #d20005; font-family: 'New Century Schoolbook', serif; font-style: oblique; text-decoration: overline" globalOnly="true"/>

[Save]. Notice that I put a field globalOnly="true" to it, if you do not put this one, h:inputText error message will show up twice.
14. We encountered #{userNumberBean.xxx}, so we know it asks the server to create a managed bean named "userNumberBean". So, we open UserNumberBean.java by expanding +Source Packages, +javaeetutorial.guessnumber.
13. The first new thing is @SessionScoped. This is a session bean and it implements Serializable, this is a must according to Java EE specification. The server never tries to serialize a request scope bean, so do not put "implements Serializable" there. A session starts from a user's first visit to the application guessnumber-jsf_c, and can end in many ways, typically timeout, logout and so on. The session bean will stay alive for the whole session, including all requests in the session. If the user has no visit for a while or the server's memory is too full, the server can choose to serialize it to a disk, if the user visits again, the server will deserialize it from the disk to the memory.
13.1 The easiest way to write an application is to use one session bean for all pages, you do not need to worry about how to do navigation among the pages. But it will change Internet HTTP fundamentals from stateless to stateful because all the states are in that session bean. In practice people will keep the session bean as small as possible.  We will keep the data: maximum, minimum and randomInt in the session bean, and create a new request scope bean to hold user guessed number and response string.
13.2 Right click UserNumberBean.java, go to [Refactor], [Rename...].  New Name: is UserSessionBean,  Click [Refactor].
13.3 Netbeans has a stuck problem sometimes here. If you get stuck, do the following: slowly click on a file name, one, two, three, till the system allows you to edit the name, enter a new name, [Enter] key. [Refactor].
13.2 Right click javaeetutorial.guessnumber under Source Packages. Go to [New], [Others]. Select [JavaServer Faces] and [JSF CDI Bean]. Click [Next].  Class Name: is UserNumberBean and the scope is the request. Click[Finish].
13.4 delete all code from UserSessionBean.java and UserNumberBean.java, make them an empty class.
13.5 Add the following code to UserSessionBean.java:
    Integer randomInt = null;
    private int maximum = 10;
    private int minimum = 0;

    public UserSessionBean() {
        Random randomGR = new Random();
        randomInt = new Integer(randomGR.nextInt(maximum + 1));
        // Print number to server log
        System.out.println("Duke's number: " + randomInt);
    }
13.6 Put the cursor before the end of class, right click, [Insert Code...], [Getter and Setter...], check [UserSessionBean], [Generate].
13.7 Add the following code to UserNumberBean:

    private Integer userNumber = null;

    public void setUserNumber(Integer user_number) {
        userNumber = user_number;
    }

    public Integer getUserNumber() {
        return userNumber;
    }

    public String getResponse() {
        if ((userNumber == null) || (userNumber.compareTo(userSessionBean.getRandomInt()) != 0)) {
            return "Sorry, " + userNumber + " is incorrect.";
        } else {
            return "Yay! You got it!";
        }
    }
13.8 There is a red error message on "userSessionBean". We want to call userSessionBean.getRandomInt(), but how to get the userSessionBean instance? All session beans are created and stored in the server JNDI database before any request scope call. The way to get a reference of the session bean is through so called CDI injection, like this:

    @Inject
    UserSessionBean userSessionBean;

insert the above code into the top of the UserNumberBean class. right click, [Fix Import...]. We will talk about CDI in detail later on.
13.9 We need to modify greeting.xhtml: userNumberBean.minimum to userSessionBean.minimum and userNumberBean.maximum to userSessionBean.maximum.
14. Now let's test the project. [Save], [Clean and Build], [Run].
14.1 Enter 20, [submit]. You will see awful error messages. Let's insert validatorMessage for [h:inputText ... ]Place the mouse cursor before ], press [Ctrl] + space key, v key, and choose validatorMessage, enter this: "The value should be between #{userSessionBean.minimum} and #{userSessionBean.maximum}."  Click save icon on Netbeans toolbar, and click [Confirm] in the browser popup window. test it with 20 again, See, nice clean error message.
15. Go back to the greeting page and enter abc, [Submit]. The error message is still not clear. We need to put converterMessage into h:inputText, enter this:  "The value should be integer between #{userSessionBean.minimum} and #{userSessionBean.maximum}.".  [Save], [Continue], You should see your change.
16. Delete anything in inputText Textbox and [Submit], surprice! It passed validation and passed to the response page. Not good!. add these 2 fields to h:inputText:
required="true" requiredMessage="Error: A number is required."
[Save], [Confirm], you should see the validation carried on correctly.
17. Open response.xhtml, change stylesheet link as: [h:outputStylesheet name="css/default.css"/], change h:graphicImage value to: "resources/images/wave.med.gif". Delete id="result" and id="back" because no stylesheet or Javascript linked to them.
18. The code is working now, but there is a big performance problem, let me show you. Put the following code into UserNumberBean.java:

    static int globalBeanID = 0;
    int localBeanID = globalBeanID;

    public UserNumberBean() {
        globalBeanID++;
        localBeanID = globalBeanID;
        System.out.println("UserNumberBean ................................................." + globalBeanID + " created.");
    }

    @Override
    public void finalize() {
        System.out.println("UserNumberBean .......................................... " + localBeanID + " destroyed.");
    }
[Save], [Clear and Build], [Run].
19. Wait for 1-2 minutes, you can see from the server created and destroyed the UserNumberBean; enter 20, [submit], wait for a while, You will see another UserNumberBean created and destroyed; enter abc, [Submit], wait for a while, You will see another UserNumberBean created and destroyed; leave input empty, [Submit], wait for a while, You will see another UserNumberBean created and destroyed; The server waste a lot of computing power to do such creation/destroy. The request scope is very bad for a page with a lot of server validations. We need to change it to a view scope.
20. Open UserNumberBean.java, change @RequestScoped to @ViewScoped, add
import javax.faces.view.ViewScoped;
The @ViewScoped can live for multiple request/response, so you need add
implements Serializable
to the class.
21. [Save], [Clear and Build], [Run]. Now you repeat the above test and will find there is only one UserNumberBean created. Good.
22. At the end, enter 5, [Submit], The page navigated to response.xhtml, but the response string is missing. After we change from session bean to request or view bean, naturally we need to deal with the issue of passing parameters among the page navigation.
the previous example hello1, we pass the value between page by the been restoration procedure, but it only works if it is a request scope bean. It won't work for a view scope bean because they have a different life cycle. For a request scope bean, when we click a [Submit] button, the bean is gone already, so the server will create a new bean and call setxxx method to set value in the new bean, the new bean will be used for the second page construction. For a view scope bean, when we click [Submit] button, the bean is still there, the server set values in this old bean, and then load the second page, and create a new bean, so the submitted values lost. 
23. The easiest way to pass the parameters between 2 pages is to use JSF flash, change SetUserNumber like this:
    public void setUserNumber(Integer user_number) {
        userNumber = user_number;
        FacesContext.getCurrentInstance().getExternalContext().getFlash()
                .put("result", getResponse());

    }
Here when the commandButton submits the form, we put the response string into the flash.
 23. Open response.xhtml, change #{userNumberBean.response} to #{flash['result']}.
24. Open greeting.xhtml, change the commandButton's action from "response" to "response?faces-redirect=true".
35. We are done. [Save], [Clear and Build], [Run].
