1. Let's go to the next example, which is hello1-rlc. In the project panel, Expend +[Java EE Tutorial], +[Modules], +[web], +jsf, right click [hello1-rlc] project,  choose [Open Project].
2. Open menu [File], [New Project...], select [Java with Maven] and [Web Application], [Next], Make Project name: Resources-3-1-1, and Project Location: C:\Programming\javaee8\tutorial\myexamples\web\jsf, click [Next]. Make sure Server: is GlassFish Server 5.1.0 and JavaEE Version: is Java EE 8 Web, [Finish ]
3. If the project name is not Resources-3-1-1, right click on it, and choose Rename... Make the Display name as Resources-3-1-1. Click [OK]
4. If you find beans.xml under Web Pages\WEB-INF, delete it. If you find anything under Source Packages, delete them all. Delete anything under Other Sources/src/main/resources.
5. Right click on project Resources-3-1-1, and choose Properties.
5.1 Click Sources in the left panel, confirm 1.8 is Source/Binary format in the right panel.
5.2 Click Frameworks in the left panel, click the [Add... ] button in the right panel. Choose [JavaServer Faces] from the list.
5.3 Click Compile in the left panel, choose [JDK 1.8 ] as Java Platform:.
5.4 Click Run in the left panel, confirm [GlassFish 5.1.0 ] is the Server, and [Java EE 8 Web ] is the Java EE Version. Click the [OK] button to close the properties window.
6. Double click web.xml under WebPages - ] WEB-INF, change /faces/* to *.xhtml, and faces/index.xhtml to index.xhtml. This will make the request call url simpler. Also change 30 minutes to 300 for the session timeout, so the page will stay there long enough for us to talk about it in detail.
7. Copy hello1-rlc project to  Resources-3-1-1.
7.1 delete all web pages from Resources-3-1-1, copy contracts, reply folders and greeting.xhtml from hello1-rlc Web Pages to Resources-3-1-1  Web Pages. copy javaeetutorial.hello1rlc folder from Source Packages of  hello1-rlc to  Resources-3-1-1.
7.2 Open web.xml again and change the welcome page to greeting.xhtml.
7.3 Right click project Resources-3-1-1,  Go to [new ], [Other... ], Select [JavaServer Faces] and [JSF Faces Configuration], [Next] and [Finish ].
7.4 copy this:
    <application>
        <resource-library-contracts>
            <contract-mapping>
                <url-pattern>/reply/*</url-pattern>
                <contracts>reply</contracts>
            </contract-mapping>
            <contract-mapping>
                <url-pattern>*</url-pattern>
                <contracts>hello</contracts>
            </contract-mapping>
        </resource-library-contracts>
    </application>
into <faces-config></faces-config> of the face-config.xml.
7.5 Do [Save ], [Clean and Build ] and [Run]. You will see a web page showing up. If you get the error: Failed to clean project, just go to Services tab to stop GlassFish server.
8. This application targets a scenario where there are multiple resource sets, and different page groups use different resource sets.
Here we have 2 sets of resources: contracts/hello and contracts/reply. The greeting.xhtml page uses hello resource set and reply/response.xhtml uses reply resource set. Let's run it, please pay attention to the different color and image of the 2 pages.
9. How do they tell us to deal with multi-resource sets? We are told to organize them into different folders: contracts/hello and contracts/reply, but the folders must be under a root folder called contracts. This is a must and you cannot change it. Open faces-config.xml, you can see you cannot define your own folder name.Remember how they regulate one set resource? We are told we must put everything under a root folder called resources. The name and location of resources' folder  is also implied and is hard code.
10. How is a page linked to a resources' set? Through a url pattern. Open the file: Web Pages\WEB-INF\faces-config.xml. You can see the resources set configuration. If you call a page with a url pattern /reply/*, the page will use the resources "repla", all other call patterns will use resources "hello".
11. This resources organization design is a failed design to me because of the following reasons: 1. Single resources' sets and multi-resources' sets have no common structure. The former has the root resources and the latter has the root contracts. 2. The resources and the contracts are both implied and hard coded. 3. We have to sacrifice the url pattern for internal resources issues. The url pattern is an important contract between the user and the application. It should be used for organizing application functions, not for organizing internal resources' sets.
12. For the above reasons, I want to rewrite this application. Right click [Web Pages], [New], [Other... ], Select [Other] and [Folder], then [Next], Folder Name: is resources. [Finish]. Under the resources folder, create hello and reply folders. Under the both folders, create 3 folders: css, images and templates.
13. copy contracts/hello/*.css to resources\hello\css,  copy contracts/hello/*.gif to resources\hello\images, and copy contracts/hello/template.xhtml to resources\hello\templates.
14. copy contracts/reply/*.css to resources\reply\css,  copy contracts/reply/*.gif to resources\reply\images, and copy contracts/reply/template.xhtml to resources\reply\templates.
15. delete contracts folder and faces-config.xml.
16. Open greeting.xhtml. make the following change: template="/resources/hello/templates/template.xhtml"
17. Open resources/hello/templates/template.xhtml, make the following changes: h:outputStylesheet name="hello/css/default.css"
h:graphicImage url="/resources/hello/images/duke.handsOnHips.gif"
18. Open response.xhtml. make the following change: template="/resources/reply/templates/template.xhtml"
19. Open resources/reply/templates/template.xhtml, make the following changes: [h:outputStylesheet name="reply/css/default.css"/ ] and h:graphicImage url="/resources/reply/images/duke.thumbsup.gif".
20. [Clean and Build] and [Run], [Submit], [Back].
21. final clean. Open Hello.java from Source Packages\javaeetutorial.hello1rlc. @Model is a shortcut of @Named
 @RequestScoped.
22. Open greeting.xhtml, delete all 3 id="xxx", delete class="messagecolor", no use to them.
23. Open resources/hello/templates/template.xhtml, delete all 4 id="xxx". no use to them.
24. Open response.xhtml, delete id="back", it is no use.
25. Open resources/reply/templates/template.xhtml, delete all 3 id="xxx". no use to them.
26. [Clean and Build] and [Run], [Submit], [Back].