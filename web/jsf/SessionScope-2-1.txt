1. Let's go to the next example, which is guessnumber-jsf. In the project panel, Expend +Java EE Tutorial -] +Modules -] +web -] +jsf, right click [guessnumber-jsf] project,  choose [Open Project].
2. Open menu [File], [New Project...], Select [Java with Maven] and [Web Application], click [Next]. Make Project name: guessnumber-jsf_c, and Project Location: C:\Programming\javaee8\tutorial\myexamples\web\jsf, click [Next]. Make sure Server: is GlassFish Server 5.1.0 and JavaEE Version: is Java EE 8 Web. Click [Finish]
3. If the project name is not  guessnumber-jsf_c, right click on it, and choose [Rename...], make the Display name as  guessnumber-jsf_c, click [OK]
4. If you find beans.xml under Web Pages\WEB-INF, delete it. If you find anything under Source Packages, delete them all.  Delete anything under [Other Sources]/src/main/resources. Click the [Save] icon on the top toolbar.
5. Right click on project  guessnumber-jsf_c, and choose Properties.
5.1 Click Sources in the left panel, confirm 1.8 is Source/Binary format in the right panel.
5.2 Click Frameworks in the left panel, click the [Add...] button in the right panel. Choose [JavaServer Faces] from the list.
5.3 Click Compile in the left panel, choose [JDK 1.8] as Java Platform:.
5.4 Click Run in the left panel, confirm [GlassFish 5.1.0] is the Server, and [Java EE 8 Web] is the Java EE Version. Click the [OK] button to close the properties window.
6. Double click web.xml under WebPages -] WEB-INF, change /faces/* to *.xhtml, and faces/index.xhtml to index.xhtml. This will make the request call url simpler. Also change 30 minutes to 300 for the session timeout, so the page will stay there long enough for us to talk about it in detail.
9. Copy guessnumber-jsf project to  guessnumber-jsf_c.
9.1 delete all web pages from guessnumber-jsf_c, copy resources folder,  greeting.xhtml and response.xhtml from guessnumber-jsf [Web Pages] to  guessnumber-jsf_c [Web Pages]. copy javaeetutorial.guessnumber folder from Source Packages of  guessnumber-jsf to guessnumber-jsf_c.
9.2 Open web.xml again and change the welcome page to greeting.xhtml.
9.3 [Save], right click the project, choose [Clean and Build], right click and choose [Run] for project  guessnumber-jsf_c. You will see a web page showing up.
9.4 Enter number 8, [Submit], click the [Back] button.
10. The welcome page is greeting.xhtml, so double click to open it.
10.1 The first thing I want to say is about h:outputStylesheet. It has library="css". OK, we can find css, but it is under resources. The resources are not mentioned anywhere. So it is implied and hard coded. So how about I want to call it another name? Or I have 2 resource sets: resources1 and resources2. So, I do not think it is a good design but we can do nothing about it. What we can do is make it simpler by removing library="...", and only using name="...", like this: name="css/default.css" or go the html way: <link rel="stylesheet" href="resources/css/default.css"/>.
11. I do not understand why an image is referenced in such a way h:graphicImage value="#{resource['images:wave.med.gif']}", awful format and a bad design again. Let's change it back to our traditional way, value="resources/images/wave.med.gif". Now it is simple, straightforward and clear.
12. Delete id="submit" and id="error1", because no stylesheet or Javascript code to address them.
13. h:message is for="userNo" and the h:inputText has id="userNo", so the h:message is for the h:inputText validation error only. What about other JSF messages? Let's add one like this: you can add it under </h:form>,

<h:messages showSummary="true" showDetail="false" style="color: #d20005; font-family: 'New Century Schoolbook', serif; font-style: oblique; text-decoration: overline" globalOnly="true"/>

[Save]. Notice that I put a field globalOnly="true" to it, if you do not put this one, h:inputText error message will show up twice.
14. We encountered #{userNumberBean.xxx}, so we know it asks the server to create a managed bean named "userNumberBean". So, we open UserNumberBean.java by expanding +Source Packages, +javaeetutorial.guessnumber.
13. The first new thing is @SessionScoped. This is a session bean and it implements Serializable, this is a must according to Java EE specification. The server never tries to serialize a request scope bean, so do not put "implements Serializable" there. A session starts from a user's first visit to the application guessnumber-jsf_c, and can end in many ways, typically timeout, logout and so on. The session bean will stay alive for the whole session, including all requests in the session. If the user has no visit for a while or the server's memory is too full, the server can choose to serialize it to a disk, if the user visits again, the server will deserialize it from the disk to the memory.
13.1 The session bean will store and should only store session scope data, the maximum and minimum are session scope, but userNumber and response vary from request to request, so they are request scope. We need to create a new request scope bean.
13.2 Right click UserNumberBean.java, go to [Refactor], [Rename...].  New Name: is UserSessionBean,  Click [Refactor].
13.3 Netbeans has a stuck problem sometimes here. If you got there, do the following: slowly click on a file name, one, two, three, till the system allows you to edit it, enter a new name, [Enter] key. [Refactor].
13.2 Right click javaeetutorial.guessnumber under Source Packages. Go to [New], [Others]. Select [JavaServer Faces] and [JSF CDI Bean]. Click [Next].  Class Name: is UserNumberBean and Scope: is request. Click[Finish].
13.3 Through a little bit of thinking, we know that randomInt, maximum and minimum are session scope data; userNumber and response are request scope data.
13.4 delete all code from UserSessionBean.java and UserNumberBean.java, make them an empty class.
13.5 Add the following code to UserSessionBean.java:
    Integer randomInt = null;
    private int maximum = 10;
    private int minimum = 0;

    public UserSessionBean() {
        Random randomGR = new Random();
        randomInt = new Integer(randomGR.nextInt(maximum + 1));
        // Print number to server log
        System.out.println("Duke's number: " + randomInt);
    }
13.6 Put the cursor before the end of class, right click, [Insert Code...], [Getter and Setter...], check [UserSessionBean], [Generate].
13.7 Add the following code to UserNumberBean:

    private Integer userNumber = null;
    String response = null;

    public void setUserNumber(Integer user_number) {
        userNumber = user_number;
    }

    public Integer getUserNumber() {
        return userNumber;
    }

    public String getResponse() {
        if ((userNumber == null) || (userNumber.compareTo(userSessionBean.getRandomInt()) != 0)) {
            return "Sorry, " + userNumber + " is incorrect.";
        } else {
            return "Yay! You got it!";
        }
    }




13.3 Modify UserSessionBean like this. Put the cursor at bottom, Right click -] [Insert Code...], select [Getter and Setter...]Check randomInt, and click [Generate].
13.4 Modify UserNumberBean like this. We want to call userSessionBean.getRandomInt(), but how to get the userSessionBean instance? All session beans are created and stored in the server JNDI database before any request scope call. So how can a request scope bean get a session bean instance? Type @Inject. click the red ball and add import... Enter UserSessionBean userSessionBean. This is called CDI and we will talk about it in detail later on.
13.5 We need to modify greeting.xhtml: userNumberBean.minimum to userSessionBean.minimum and userNumberBean.maximum to userSessionBean.maximum.
14. Now let's test the project. [Clean and Build], [Run].
14.1 Enter 20, [submit]. You will see awful error messages. Let's insert validatorMessage for [h:inputText ... ]Place the mouse cursor before ], press [Ctrl] + space key, and choose validatorMessage, enter anything you feel good, like "The value should be between #{userNumberBean.minimum} and #{userNumberBean.maximum}."  test it. See, nice clean error message.
15. Go back to the greeting page and enter abc, [Submit]. The error message is still not clear. We need to put converterMessage into h:inputText, choose any words you feel good. My choice could be  "The value should be integer between #{userNumberBean.minimum} and #{userNumberBean.maximum}.".  Click save icon on Netbeans toolbar, and click [Confirm] in the browser popup window. You should see your change.
16. Delete anything in inputText Textbox and [Submit], surprice! It passed validation and passed to the response page. Not good!. Go to project hello1_c, open index.xhtml, and copy these 2 fields: required and requiredMessage, change message to "Error: A value is required." Save, Confirm, you should see the validation carried on correctly.
17. Open response.xhtml, change stylesheet link as: [h:outputStylesheet name="resources/css/default.css"/], change h:graphicImage value to: "resources/images/wave.med.gif". Delete id="result" and id="back" because no stylesheet or Javascript linked to them.